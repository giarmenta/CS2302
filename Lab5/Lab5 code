'''
Gerardo Armenta
04/10/19
Lab 5
'''

import math
import numpy as np
import time


class BST(object):
    # Constructor
    def __init__(self, item, left=None, right=None):
        self.item = item
        self.left = left
        self.right = right

def Insert(T, newItem):  # Populates elements to BST
    if T == None:
        T = BST(newItem)
    elif T.item[0] > newItem[0]:
        T.left = Insert(T.left, newItem)
    else:
        T.right = Insert(T.right, newItem)
    return T

def Find(T, k):
    # Returns the address of k in BST, or None if k is not in the tree
    if T is None or T.item[0] == k:
        return T.item[1]
    if T.item[0] < k:
        return Find(T.right, k)
    return Find(T.left, k)

def Height(T):  # Returns the height of the BST
    if T is not None:
        return (1 + max([(Height(T.left)), Height(T.right)]))
    else:
        return -1
    
def NodeNum(T):  # Returns the number of nodes in the BST
    if T is not None:
        return 1 + NodeNum(T.left) + NodeNum(T.right)
    return 0

# Implementation of hash tables with chaining
class HashTableC(object):
    # Builds a hash table of size 'size'
    # Item is a list of (initially empty) lists
    # Constructor
    def __init__(self, size):
        self.item = []
        self.count = 0
        for i in range(size):
            self.item.append([])

def Index(k, length):  # Returns the index
    idx = 0
    for i in k:
        idx = (idx * length + ord(i)) % length
    return idx

def EmptyListNum(H):  # Returns the number of empty lists
    c = 0
    m = H.count / len(H.item)
    k = 0
    for a in H.item:
        k += len(a) - m
        if a == []:  # [] found
            c += 1
    return c, (1 / len(H.item)) * k

def Double(H):  # Doubles the size of the Hash Table's length
    H2 = HashTableC(2 * len(H.item) + 1)
    for elems in H.item:  # Populates elements to new Hash Table H2
        if elems is not None:
            for i in elems:
                H2.item[Index(i[0], len(H2.item))].append([i[0], i[1]])
                H2.count += 1
    return H2

def InsertC(H, k):  # Inserts items to Hash Table
    if H.count // len(H.item) == 1:  # Checks if Hash Table needs to be doubled
        H = Double(H)
    b = Index(k[0], len(H.item))
    H.item[b].append([k[0], np.array(k[1:]).astype(np.float)])
    H.count += 1  
    return H

def FindC(H, k):
    b = Index(k, len(H.item))
    for i in range(len(H.item[b])):
        if H.item[b][i][0] == k:
            return H.item[b][i][1]
    return -1

def bstmode():  # Runs if user input 1 for BST
    T = None
    print("\nBuilding binary search tree.\n")
    start = int(time.time())
    with open('glove.6B.50d.txt', encoding='utf-8') as file:
        for l in file:
            line = l.split(' ')
            T = Insert(T, [line[0], np.array(line[1:]).astype(np.float)])
    end = int(time.time())
    print("Binary Search Tree stats:")
    print("Number of nodes: ", NodeNum(T))
    print("Height: ", Height(T))
    print("Running time for binary search tree construction:", (end - start))
    print("\nReading word file to determine similarities.\n")
    start = int(time.time())
    # reads words from wordlist.txt to find the similarity between both
    with open('wordlist.txt', encoding='utf-8') as file2:
        print('Word Similarities found:')
        for l2 in file2:
            line2 = l2.split()
            e0 = Find(T, line2[0])
            e1 = Find(T, line2[1])
            print("Similarity", line2[0:2], " = ", round(np.sum(e0 * e1) / (math.sqrt(np.sum(e0 * e0)) * math.sqrt(np.sum(e1 * e1))), 4))
    end = int(time.time())
    print("\nRunning time for binary search tree query processing: ", (end - start))

def hashmode():  # Runs if user input 2 for Hash Table
    H = HashTableC(10)  # creates Hash Table 
    c, d = EmptyListNum(H)
    print('\nBuilding Hash Table with Chaining\n')
    print('Hash Table stats:')
    print('Initial table size: ', len(H.item))
    start = int(time.time())
    # populates the Hash Table from glove.txt file
    with open('glove.6B.50d.txt', encoding = 'utf-8') as file:
        for l in file:
            line = l.split()
            H = InsertC(H, line)
    file.close()
    end = int(time.time())
    print('Final table size: ', len(H.item))
    print('Load Factor: ', H.count / len(H.item) * 100)
    print('Percentage of empty lists: ', c / len(H.item) * 100)
    print("Standard deviation of the lengths of the lists:", d)
    print("Running time for Hash Table construction:", (end - start))
    print("\nReading word file to determine similarities.\n")
    start = int(time.time())
    # reads words from wordlist.txt to find the similarity between both
    with open('wordlist.txt', encoding = 'utf-8') as file2:
        print('Word Similarities found:')
        for l in file2:
            line2 = l.split()
            e0 = FindC(H, line2[0])
            e1 = FindC(H, line2[1])
            print("Similarity", line2[0:2], " = ", round(np.sum(e0 * e1) / (math.sqrt(np.sum(e0 * e0)) * math.sqrt(np.sum(e1 * e1))), 4))
    file2.close()
    end = int(time.time())
    print("\nRunning time for hash table query processing: ", (end - start))
      
print('Choose table implementation')
ans = int(input('Type 1 for binary search tree or 2 for hash table with chaining '))

if ans is 1:
    bstmode()
else:
    hashmode()
