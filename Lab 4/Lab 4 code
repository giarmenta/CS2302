# Code to implement a B-tree
# Programmed by Olac Fuentes
# Last modified February 28, 2019
'''
Gerardo Armenta
Lab 4
4/1/19
'''

class BTree(object):
    # Constructor
    def __init__(self, item=[], child=[], isLeaf=True, max_items=5):
        self.item = item
        self.child = child
        self.isLeaf = isLeaf
        if max_items < 3:  # max_items must be odd and greater or equal to 3
            max_items = 3
        if max_items % 2 == 0:  # max_items must be odd and greater or equal to 3
            max_items += 1
        self.max_items = max_items


def FindChild(T, k):
    # Determines value of c, such that k must be in subtree T.child[c], if k is in the BTree
    for i in range(len(T.item)):
        if k < T.item[i]:
            return i
    return len(T.item)


def InsertInternal(T, i):
    # T cannot be Full
    if T.isLeaf:
        InsertLeaf(T, i)
    else:
        k = FindChild(T, i)
        if IsFull(T.child[k]):
            m, l, r = Split(T.child[k])
            T.item.insert(k, m)
            T.child[k] = l
            T.child.insert(k + 1, r)
            k = FindChild(T, i)
        InsertInternal(T.child[k], i)


def Split(T):
    # print('Splitting')
    # PrintNode(T)
    mid = T.max_items // 2
    if T.isLeaf:
        leftChild = BTree(T.item[:mid])
        rightChild = BTree(T.item[mid + 1:])
    else:
        leftChild = BTree(T.item[:mid], T.child[:mid + 1], T.isLeaf)
        rightChild = BTree(T.item[mid + 1:], T.child[mid + 1:], T.isLeaf)
    return T.item[mid], leftChild, rightChild


def InsertLeaf(T, i):
    T.item.append(i)
    T.item.sort()


def IsFull(T):
    return len(T.item) >= T.max_items


def Insert(T, i):
    if not IsFull(T):
        InsertInternal(T, i)
    else:
        m, l, r = Split(T)
        T.item = [m]
        T.child = [l, r]
        T.isLeaf = False
        k = FindChild(T, i)
        InsertInternal(T.child[k], i)


def height(T):
    if T.isLeaf:
        return 0
    return 1 + height(T.child[0])


def Search(T, k):
    # Returns node where k is, or None if k is not in the tree
    if k in T.item:
        return T
    if T.isLeaf:
        return None
    return Search(T.child[FindChild(T, k)], k)


def Print(T):
    # Prints items in tree in ascending order
    if T.isLeaf:
        for t in T.item:
            print(t, end=' ')
    else:
        for i in range(len(T.item)):
            Print(T.child[i])
            print(T.item[i], end=' ')
        Print(T.child[len(T.item)])


def PrintD(T, space):
    # Prints items and structure of B-tree
    if T.isLeaf:
        for i in range(len(T.item) - 1, -1, -1):
            print(space, T.item[i])
    else:
        PrintD(T.child[len(T.item)], space + '   ')
        for i in range(len(T.item) - 1, -1, -1):
            print(space, T.item[i])
            PrintD(T.child[i], space + '   ')


def SearchAndPrint(T, k):
    node = Search(T, k)
    if node is None:
        print(k, 'not found')
    else:
        print(k, 'found', end=' ')
        print('node contents:', node.item)

def TreeToList(T,L):  # creates a sorted list from the values in the b-tree
    if T.isLeaf:
        for t in range(len(T.item)):
            L.append(T.item[t])
    else:
        for i in range(len(T.item)):
            TreeToList(T.child[i], L)
            L.append(T.item[i])
        TreeToList(T.child[len(T.item)], L)
    return L

def NumOfNodes(T,d,c):  # Returns the number of nodes in a given depth of a b-tree
    if T.isLeaf and d > 0:
        return -1
    elif d == 0:
        c += 1
    else:
        for i in range(len(T.item)):
            NumOfNodes(T.child[i], d-1, c)
        NumOfNodes(T.child[len(T.item)], d-1, c)
    return c

def MinAtDepth(T, d):  # Returns the minimum integer at a given depth of a b-tree
    if T.isLeaf and d != 0:
        print('Depth requested exceeds the depth of the B-Tree')
        return
    elif d == 0:
        return T.item[0]
    else:
        return MinAtDepth(T.child[0], d-1)

def MaxAtDepth(T,d):  # Returns the max integer at a given depth of a b-tree
    if T.isLeaf and d != 0:
        print('Depth requested exceeds the depth of the B-Tree')
        return
    elif d == 0:
        return T.item[-1]
    else:
        return MaxAtDepth(T.child[-1], d-1)

def KeyAtDepth(T,k,d):  # Returns the depth where a given key is in the b-tree
    if T.isLeaf:
        for i in range(len(T.item)):
            if k == T.item[i]:
                return d
        return -1
    for keys in range(len(T.item)):
        if k == T.item[keys]:
            return d
        elif k < T.item[keys]:
            return KeyAtDepth(T.child[keys],k,d+1)
        elif k > T.item[-1]:
            return KeyAtDepth(T.child[-1],d,d+1)

L = [30, 50, 10, 20, 60, 70, 100, 40, 90, 80, 110, 120, 1, 11, 3, 4, 5, 105, 115, 200, 2, 45, 6]
T = BTree()
for i in L:
    #print('Inserting', i)
    Insert(T, i)
    #PrintD(T, '')
    #Print(T)
    #print('\n####################################')
'''
SearchAndPrint(T, 60)
SearchAndPrint(T, 200)
SearchAndPrint(T, 25)
SearchAndPrint(T, 20)
'''
print('The height of the b-tree is: ', height(T))  # Prints the height of the b-tree
newlist = []
print('The key 10 is found at depth: ', KeyAtDepth(T,10,0)) # Prints the depth at where the selected key is found
print(TreeToList(T, newlist))  # Prints the list created from the b-tree
print('The number of nodes in depth 1 is ', NumOfNodes(T,1,0))  # Prints the number of nodes in the selected depth
print('The minimum number at depth 2 is: ', MinAtDepth(T,2))  # Prints the min number found at the selected depth
print('The maximum number at depth 2 is: ', MaxAtDepth(T,2))  # Prints the max number found a the selected depth
