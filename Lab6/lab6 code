#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
Gerardo Armenta
Lab 6
4/15/16
'''
import matplotlib.pyplot as plt
import numpy as np
import time
import random

def DisjointSetForest(size):
    # Creates disjoint set forest all set to -1 (the root)
    return np.zeros(size,dtype=np.int)-1

def find(S,i):
    # Returns root of tree that i belongs to
    if S[i]<0:
        return i
    return find(S,S[i])

def find_c(S,i): #Find with path compression 
    if S[i]<0: 
        return i
    r = find_c(S,S[i]) 
    S[i] = r 
    return r
    
def union(S,i,j):
    # Joins i's tree and j's tree, if they are different
    ri = find(S,i) 
    rj = find(S,j)
    if ri!=rj:
        S[rj] = ri
        return True
    return False

def union_c(S,i,j):
    # Joins i's tree and j's tree, if they are different
    # Uses path compression
    ri = find_c(S,i) 
    rj = find_c(S,j)
    if ri!=rj:
        S[rj] = ri
        return True
    return False

def NumSets(S):
    # Counts the number of sets of a disjoint set forest
    count =0
    for i in S:
        if i < 0:
            count += 1
    return count

def draw_maze(walls,maze_rows,maze_cols,cell_nums=False):
    # Draws a maze
    fig, ax = plt.subplots()
    for w in walls:
        if w[1]-w[0] ==1: #vertical wall
            x0 = (w[1]%maze_cols)
            x1 = x0
            y0 = (w[1]//maze_cols)
            y1 = y0+1
        else:#horizontal wall
            x0 = (w[0]%maze_cols)
            x1 = x0+1
            y0 = (w[1]//maze_cols)
            y1 = y0  
        ax.plot([x0,x1],[y0,y1],linewidth=1,color='k')
    sx = maze_cols
    sy = maze_rows
    ax.plot([0,0,sx,sx,0],[0,sy,sy,0,0],linewidth=2,color='k')
    if cell_nums:
        for r in range(maze_rows):
            for c in range(maze_cols):
                cell = c + r*maze_cols   
                ax.text((c+.5),(r+.5), str(cell), size=10,
                        ha="center", va="center")
    ax.axis('off') 
    ax.set_aspect(1.0)

def wall_list(maze_rows, maze_cols):
    # Creates a list with all the walls in the maze
    w =[]
    for r in range(maze_rows):
        for c in range(maze_cols):
            cell = c + r*maze_cols
            if c!=maze_cols-1:
                w.append([cell,cell+1])
            if r!=maze_rows-1:
                w.append([cell,cell+maze_cols])
    return w

plt.close("all") 
maze_rows = 10
maze_cols = 15

walls = wall_list(maze_rows,maze_cols) # Creates the walls for the maze

M = DisjointSetForest(maze_rows*maze_cols)
M2 = DisjointSetForest(maze_rows*maze_cols)
draw_maze(walls,maze_rows,maze_cols,cell_nums=True)

ans = int(input('Select 1 for regular union or 2 for compressed union: '))
start_union = time.time() * 1000
start_union_c = time.time() * 1000
    
while NumSets(M) > 1:  # Will keep in loop as long as dsf set is greater than 1
    d = random.randint(0, len(walls)-1)

    if ans == 1:
        if union(M, walls[d][0], walls[d][1]):  # Creates a union and removes a wall
            walls.pop(d)
    else:
        if union_c(M, walls[d][0], walls[d][1]):  # Creates a compressed union and removes a wall
            walls.pop(d)
            
stop_union_c = time.time() * 1000
stop_union = time.time() * 1000

if ans == 1:
    print('Running time for using standard union with maze size: ', 
          maze_rows, ' rows, ', maze_cols, ' colums, time in milliseconds: ', (stop_union-start_union))
else:
    print('Running time for using union by size with path compression with maze size: ', maze_rows, 
          ' rows, ', maze_cols, ' colums, time in milliseconds: ', (stop_union_c-start_union_c))

draw_maze(walls,maze_rows,maze_cols)
plt.show()
